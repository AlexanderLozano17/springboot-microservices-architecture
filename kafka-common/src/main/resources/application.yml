server:
  port: 8086
  servlet:
    context-path: /

spring:
  application:
    name: kafka-common-service

  datasource:
    # MODE=PostgreSQL: hace que H2 interprete la sintaxis como si fuera PostgreSQL (√∫til si se migra).
    # DB_CLOSE_DELAY=-1 indica: No cerrar la base de datos en memoria mientras la JVM est√© viva
    url: jdbc:h2:mem:restaurant;MODE=PostgreSQL;DB_CLOSE_DELAY=-1 
    driver-class-name: org.h2.Driver
    username: sa
    password:
    
  jpa:
    properties:
      hibernate:
        default_schema: kafka_schema  # Define el esquema donde se crear√°n y buscar√°n las tablas.
    hibernate:
      ddl-auto: none
    show-sql: false
    database-platform: org.hibernate.dialect.H2Dialect

  kafka:
    bootstrap-servers: 192.168.1.21:9092

    producer:
      retries: 5
      batch-size: 4096
      buffer-memory: 1048576
      linger-ms: 1
      acks: all
      enable-idempotence: true
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  resilience4j:
    circuitbreaker:
      instances:
        sagaEventConsumer:
          registerHealthIndicator: true    # ‚úÖ Registra el estado del Circuit Breaker en el endpoint /actuator/health.
          slidingWindowSize: 10            # üîÅ N√∫mero de llamadas recientes usadas para calcular la tasa de fallos (en este caso, 10).
          failureRateThreshold: 50         # ‚ùå Porcentaje de fallos permitido antes de abrir el circuito. Aqu√≠: 50% de fallos en 10 llamadas.
          waitDurationInOpenState: 10s     # ‚è±Ô∏è Tiempo que el circuito se mantiene abierto antes de pasar a "half-open" y probar de nuevo.